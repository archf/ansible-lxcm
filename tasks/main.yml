---
# tasks file for ansible-lxcm

- name: register existing containers'name on target host
  command: lxc-ls
  register: lxcm_existing_containers
  always_run: true

# - debug: msg={{item.name}}
#   with_items: "{{lxcm_containers}}"

# - fail:

- name: create container (download image if unexisting)
  lxc_container:
    name: "{{item.name}}"
    state: started
    container_log: "{{ item.container_log|default('false') }}"
    container_log_level: "{{ item.container_log_level|default('INFO') }}"
    template: "{{ item.template|default('ubuntu') }}"
    template_options: "{{ item.template_option|default('--release trusty') }}"
    container_command: |
      for u in {{ lxc_users|map(attribute='name')|list|join(' ') }}
      do
        {% if item.template is defined and item.template == 'centos' %}
        useradd --groups adm,users,wheel --create-home $u
        yum install sudo
        {% elif item.template is defined and item.template == 'fedora' %}
        useradd --groups adm,users,wheel --create-home $u
        dnf install sudo
        {% else %}
        useradd --groups adm,users --create-home $u
        {% endif %}
      done
  with_items: "{{lxcm_containers}}"
  when: (lxcm_state != "absent") and (item.name not in lxcm_existing_containers.stdout)

- name: inject a plublic ssh key in each container for each "{{lxc_users}}"
  lineinfile:
    state: present
    create: yes
    line: "{{ lookup('file', item.1.ssh_key) }}"
    owner: "{{ item.1.name }}"
    group: "{{ item.1.name }}"
    dest: "{{ lxcm_container_path|default('/var/lib/lxc/') }}/{{ item.0.name }}/rootfs/home/{{ item.1.name }}/.ssh/authorized_keys"
  with_nested:
    - "{{lxcm_containers}}"
    - "{{lxc_users}}"
  when: (lxcm_state != "absent") and (item.0.name not in lxcm_existing_containers.stdout)

- name: generate inventory of containers
  add_host:
    name: "{{ item.name }}.{{ lxcm_domain }}"
    groups: "{{ item.grp|default(lxcm_default_grp) }}"
  with_items: "{{lxcm_containers}}"
  when: lxcm_state != "absent"

- name: generate child group of containers
  add_host:
    name: "{{ item.name }}.{{ lxcm_domain }}"
    groups: "{{ lxcm_child_grp }}"
  with_items: "{{lxcm_containers}}"
  when: lxcm_state != "absent"

- name: apply lxc container(s) state
  lxc_container:
    name: "{{ item.name }}"
    state: "{{ lxcm_state }}"
  with_items: "{{lxcm_containers}}"

# - debug: var=groups.lxcm_child_grp
# - name: wait for lxc guests to be ssh ready
#   wait_for:
#     port: 22
#     host: "{{ item }}"
#     search_regex: OpenSSH
#     timeout: 60
#     delegate_to: localhost
#   when: (lxcm_state != "stopped" and lxcm_state != "absent" and lxcm_state != "frozen") or (lxcm_state == "reloaded")
#   with_items: groups.{{lxcm_child_grp}}
