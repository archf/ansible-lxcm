---
# tasks file for ansible-lxcm

- name: register existing containers'name on target host
  command: lxc-ls
  register: lxcm_existing_containers
  always_run: true

# - fail:

- name: create container (download image if unexisting)
  lxc_container:
    name: "{{item.name}}"
    state: started
    container_log: "{{item.container_log|default('false')}}"
    container_log_level: "{{item.container_log_level|default('INFO')}}"
    template: "{{item.template|default('ubuntu')}}"
    template_options: "{{item.template_option|default('--release trusty')}}"
    container_command: |
      for u in {{lxc_users|map(attribute='name')|list|join(' ')}}
      do
        {% if item.template is defined and item.template == 'centos' %}
        useradd --groups adm,users,wheel --create-home $u
        yum install sudo
        {% elif item.template is defined and item.template == 'fedora' %}
        useradd --groups adm,users,wheel --create-home $u
        dnf install sudo
        {% else %}
        useradd --groups adm,users --create-home $u
        {% endif %}
      done
  with_items: "{{lxcm_containers}}"
  when: (lxcm_state != "absent") and (item.name not in lxcm_existing_containers.stdout)

- name: generate containers' inventory
  add_host:
    name: "{{item.name}}.{{lxcm_domain}}"
    groups: "{{item.grp|default(lxcm_default_grp)}}"
  with_items: "{{lxcm_containers}}"
  when: lxcm_state != "absent"

- name: generate containers' child group
  add_host:
    name: "{{item.name}}.{{lxcm_domain}}"
    groups: "{{lxcm_child_grp}}"
  with_items: "{{lxcm_containers}}"
  when: lxcm_state != "absent"

- debug: var=groups
- debug: msg="{{lxcm_child_grp}}"
# - debug: var=groups.bind_ipvl
# - debug: var={{groups.{{lxcm_default_grp}}|list}}
- debug: msg={{groups|map(attribute=lxcm_child_grp)|list }}

# - fail:

- name: wait for container to get an ip
  wait_for:
    port: 22
    host: "{{item}}"
    search_regex: OpenSSH
  delegate_to: localhost
  with_items: groups.{{lxcm_child_grp}}

  # when: (lxcm_state != "absent") and (item.name not in lxcm_existing_containers.stdout)

- debug:
    msg: 'hello'

# - fail:

- name: inject a plublic ssh key in each container for each "{{lxc_users}}"
  lineinfile:
    state: present
    create: yes
    line: "{{lookup('file', item.1.ssh_key)}}"
    owner: "{{item.1.name}}"
    group: "{{item.1.name}}"
    dest: "{{lxcm_container_path|default('/var/lib/lxc/')}}/{{item.0.name}}/rootfs/home/{{item.1.name}}/.ssh/authorized_keys"
  with_nested:
    - "{{lxcm_containers}}"
    - "{{lxc_users}}"
  when: (lxcm_state != "absent") and (item.0.name not in lxcm_existing_containers.stdout)

- name: apply lxc container(s) state
  lxc_container:
    name: "{{item.name}}"
    state: "{{lxcm_state}}"
  with_items: "{{lxcm_containers}}"

# - debug: var=groups.lxcm_child_grp
# - name: wait for lxc guests to be ssh ready
